// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// vectorize
arma::mat vectorize(arma::mat mat, int axis);
RcppExport SEXP rarhsmm_vectorize(SEXP matSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorize(mat, axis));
    return rcpp_result_gen;
END_RCPP
}
// colsum
arma::vec colsum(arma::mat matrix);
RcppExport SEXP rarhsmm_colsum(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(colsum(matrix));
    return rcpp_result_gen;
END_RCPP
}
// rowsum
arma::vec rowsum(arma::mat matrix);
RcppExport SEXP rarhsmm_rowsum(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(rowsum(matrix));
    return rcpp_result_gen;
END_RCPP
}
// subsetmatrix
arma::mat subsetmatrix(arma::mat rawmat, arma::vec rowindex, arma::vec colindex);
RcppExport SEXP rarhsmm_subsetmatrix(SEXP rawmatSEXP, SEXP rowindexSEXP, SEXP colindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type rawmat(rawmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rowindex(rowindexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type colindex(colindexSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetmatrix(rawmat, rowindex, colindex));
    return rcpp_result_gen;
END_RCPP
}
// matrixpower
arma::mat matrixpower(arma::mat oldmat, int power);
RcppExport SEXP rarhsmm_matrixpower(SEXP oldmatSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type oldmat(oldmatSEXP);
    Rcpp::traits::input_parameter< int >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixpower(oldmat, power));
    return rcpp_result_gen;
END_RCPP
}
// matrixexp
arma::mat matrixexp(arma::mat oldmat, double t);
RcppExport SEXP rarhsmm_matrixexp(SEXP oldmatSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type oldmat(oldmatSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixexp(oldmat, t));
    return rcpp_result_gen;
END_RCPP
}
// matrixsum
double matrixsum(arma::mat mat1, arma::mat mat2);
RcppExport SEXP rarhsmm_matrixsum(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(matrixsum(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// matrixintegral
arma::mat matrixintegral(arma::mat Q, double interval, int x, int y);
RcppExport SEXP rarhsmm_matrixintegral(SEXP QSEXP, SEXP intervalSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(matrixintegral(Q, interval, x, y));
    return rcpp_result_gen;
END_RCPP
}
// hsmm_hmm
arma::mat hsmm_hmm(arma::mat omega, arma::mat dm, arma::vec mv);
RcppExport SEXP rarhsmm_hsmm_hmm(SEXP omegaSEXP, SEXP dmSEXP, SEXP mvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mv(mvSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmm_hmm(omega, dm, mv));
    return rcpp_result_gen;
END_RCPP
}
// rmultinomial
arma::vec rmultinomial(int n, int k, arma::vec prob, arma::vec label);
RcppExport SEXP rarhsmm_rmultinomial(SEXP nSEXP, SEXP kSEXP, SEXP probSEXP, SEXP labelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type label(labelSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinomial(n, k, prob, label));
    return rcpp_result_gen;
END_RCPP
}
// mvrnorm
arma::mat mvrnorm(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP rarhsmm_mvrnorm(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnorm(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// mvdnorm
arma::vec mvdnorm(arma::mat x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP rarhsmm_mvdnorm(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(mvdnorm(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// rgeometric
arma::vec rgeometric(int n, double pp);
RcppExport SEXP rarhsmm_rgeometric(SEXP nSEXP, SEXP ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pp(ppSEXP);
    rcpp_result_gen = Rcpp::wrap(rgeometric(n, pp));
    return rcpp_result_gen;
END_RCPP
}
// dgeometric
double dgeometric(int x, double pp, bool loga);
RcppExport SEXP rarhsmm_dgeometric(SEXP xSEXP, SEXP ppSEXP, SEXP logaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< bool >::type loga(logaSEXP);
    rcpp_result_gen = Rcpp::wrap(dgeometric(x, pp, loga));
    return rcpp_result_gen;
END_RCPP
}
// mvnhmm_gen
Rcpp::List mvnhmm_gen(long n, int M, int d, arma::vec prior, arma::mat tpm, Rcpp::List meanlist, Rcpp::List sigmalist);
RcppExport SEXP rarhsmm_mvnhmm_gen(SEXP nSEXP, SEXP MSEXP, SEXP dSEXP, SEXP priorSEXP, SEXP tpmSEXP, SEXP meanlistSEXP, SEXP sigmalistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tpm(tpmSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type meanlist(meanlistSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigmalist(sigmalistSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnhmm_gen(n, M, d, prior, tpm, meanlist, sigmalist));
    return rcpp_result_gen;
END_RCPP
}
// getnodeprob_nocov_mvn
arma::mat getnodeprob_nocov_mvn(arma::mat ystar, Rcpp::List mean, Rcpp::List sigma, int m, int p, int arp, Rcpp::List automat);
RcppExport SEXP rarhsmm_getnodeprob_nocov_mvn(SEXP ystarSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP mSEXP, SEXP pSEXP, SEXP arpSEXP, SEXP automatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ystar(ystarSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type arp(arpSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type automat(automatSEXP);
    rcpp_result_gen = Rcpp::wrap(getnodeprob_nocov_mvn(ystar, mean, sigma, m, p, arp, automat));
    return rcpp_result_gen;
END_RCPP
}
// getnodeprob_part2
arma::mat getnodeprob_part2(arma::mat y, arma::mat x, arma::cube beta, arma::cube mu, Rcpp::List sigma, int m, int p);
RcppExport SEXP rarhsmm_getnodeprob_part2(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(getnodeprob_part2(y, x, beta, mu, sigma, m, p));
    return rcpp_result_gen;
END_RCPP
}
// forwardbackward
Rcpp::List forwardbackward(arma::vec Pi, arma::mat P, arma::mat nodeprob, long dim, arma::vec ntimes);
RcppExport SEXP rarhsmm_forwardbackward(SEXP PiSEXP, SEXP PSEXP, SEXP nodeprobSEXP, SEXP dimSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodeprob(nodeprobSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardbackward(Pi, P, nodeprob, dim, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// hmmllk
double hmmllk(arma::vec delta, arma::mat gamma, arma::mat nodeprob, arma::vec y, arma::vec ntimes, arma::vec timeindex, int missing);
RcppExport SEXP rarhsmm_hmmllk(SEXP deltaSEXP, SEXP gammaSEXP, SEXP nodeprobSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP timeindexSEXP, SEXP missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodeprob(nodeprobSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    Rcpp::traits::input_parameter< int >::type missing(missingSEXP);
    rcpp_result_gen = Rcpp::wrap(hmmllk(delta, gamma, nodeprob, y, ntimes, timeindex, missing));
    return rcpp_result_gen;
END_RCPP
}
// hmmllk_cont
double hmmllk_cont(arma::vec delta, arma::mat gamma, arma::mat nodeprob, arma::vec y, arma::vec ntimes, arma::vec timeindex);
RcppExport SEXP rarhsmm_hmmllk_cont(SEXP deltaSEXP, SEXP gammaSEXP, SEXP nodeprobSEXP, SEXP ySEXP, SEXP ntimesSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodeprob(nodeprobSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(hmmllk_cont(delta, gamma, nodeprob, y, ntimes, timeindex));
    return rcpp_result_gen;
END_RCPP
}
// fb_cont
Rcpp::List fb_cont(arma::vec Pi, arma::mat P, arma::mat nodeprob, long dim, arma::vec ntimes, arma::vec timeindex);
RcppExport SEXP rarhsmm_fb_cont(SEXP PiSEXP, SEXP PSEXP, SEXP nodeprobSEXP, SEXP dimSEXP, SEXP ntimesSEXP, SEXP timeindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodeprob(nodeprobSEXP);
    Rcpp::traits::input_parameter< long >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type timeindex(timeindexSEXP);
    rcpp_result_gen = Rcpp::wrap(fb_cont(Pi, P, nodeprob, dim, ntimes, timeindex));
    return rcpp_result_gen;
END_RCPP
}
